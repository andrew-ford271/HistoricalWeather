// <auto-generated />
using System;
using HistoricalWeather.EF.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HistoricalWeather.EF.Migrations
{
    [DbContext(typeof(NoaaWeatherContext))]
    [Migration("20240509171849_DayColumn")]
    partial class DayColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("HistoricalWeather.Domain.Models.Station", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(11)");

                    b.Property<double>("Elevation")
                        .HasColumnType("decimal(4,1)");

                    b.Property<double>("Latitude")
                        .HasColumnType("decimal(2,4)");

                    b.Property<double>("Longitude")
                        .HasColumnType("decimal(3,4)");

                    b.Property<string>("State")
                        .HasColumnType("char(2)");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("char(32)");

                    b.HasKey("Id");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("HistoricalWeather.Domain.Models.StationDataType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndDate")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("decimal(2,4)");

                    b.Property<double>("Longitude")
                        .HasColumnType("decimal(3,4)");

                    b.Property<int>("StartDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StationId")
                        .IsRequired()
                        .HasColumnType("char(11)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("char(4)");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("StationDataTypes");
                });

            modelBuilder.Entity("HistoricalWeather.Domain.Models.WeatherRecordDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<char>("MFlag")
                        .HasColumnType("char(1)");

                    b.Property<char>("QFlag")
                        .HasColumnType("char(1)");

                    b.Property<char>("SFlag")
                        .HasColumnType("char(1)");

                    b.Property<int>("Value")
                        .HasColumnType("char(4)");

                    b.Property<int?>("WeatherRecordMonthId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WeatherRecordMonthId");

                    b.ToTable("WeatherRecordDays");
                });

            modelBuilder.Entity("HistoricalWeather.Domain.Models.WeatherRecordMonth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Element")
                        .IsRequired()
                        .HasColumnType("char(4)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("StationId")
                        .IsRequired()
                        .HasColumnType("char(11)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.ToTable("WeatherRecordMonths");
                });

            modelBuilder.Entity("HistoricalWeather.Domain.Models.StationDataType", b =>
                {
                    b.HasOne("HistoricalWeather.Domain.Models.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("HistoricalWeather.Domain.Models.WeatherRecordDay", b =>
                {
                    b.HasOne("HistoricalWeather.Domain.Models.WeatherRecordMonth", null)
                        .WithMany("Days")
                        .HasForeignKey("WeatherRecordMonthId");
                });

            modelBuilder.Entity("HistoricalWeather.Domain.Models.WeatherRecordMonth", b =>
                {
                    b.HasOne("HistoricalWeather.Domain.Models.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("HistoricalWeather.Domain.Models.WeatherRecordMonth", b =>
                {
                    b.Navigation("Days");
                });
#pragma warning restore 612, 618
        }
    }
}
